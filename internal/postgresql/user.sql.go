// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE  id = $1 RETURNING id AS res
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var res uuid.UUID
	err := row.Scan(&res)
	return res, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
  name,
  lastname,
  username,
  country
)
VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id
`

type InsertUserParams struct {
	Name     string
	Lastname string
	Username string
	Country  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Name,
		arg.Lastname,
		arg.Username,
		arg.Country,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const selectUser = `-- name: SelectUser :one
SELECT id, name, lastname, username, country FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectUser(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRowContext(ctx, selectUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Username,
		&i.Country,
	)
	return i, err
}

const selectUsersByCountry = `-- name: SelectUsersByCountry :many
SELECT id, name, lastname, username, country FROM users 
WHERE country = $1 LIMIT 100
`

func (q *Queries) SelectUsersByCountry(ctx context.Context, country string) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, selectUsersByCountry, country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lastname,
			&i.Username,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
  name = $1,
  lastname    = $2,
  username  = $3,
  country = $4
WHERE id = $5 RETURNING id AS res
`

type UpdateUserParams struct {
	Name     string
	Lastname string
	Username string
	Country  string
	ID       uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Lastname,
		arg.Username,
		arg.Country,
		arg.ID,
	)
	var res uuid.UUID
	err := row.Scan(&res)
	return res, err
}
